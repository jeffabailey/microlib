zackwashere /Users/tyson/microlib/auth/key-set.json
>>>>>>>>>chunkId 610
github url URL {
  href: 'https://api.github.com/610.js?owner=module-federation&repo=microlib-example&filedir=dist&branch=customer4',
  origin: 'https://api.github.com',
  protocol: 'https:',
  username: '',
  password: '',
  host: 'api.github.com',
  hostname: 'api.github.com',
  port: '',
  pathname: '/610.js',
  search: '?owner=module-federation&repo=microlib-example&filedir=dist&branch=customer4',
  searchParams: URLSearchParams {
    'owner' => 'module-federation',
    'repo' => 'microlib-example',
    'filedir' => 'dist',
    'branch' => 'customer4' },
  hash: ''
}
>>>>>>>>>chunkId 662
github url URL {
  href: 'https://api.github.com/662.js?owner=module-federation&repo=microlib-example&filedir=dist&branch=customer4',
  origin: 'https://api.github.com',
  protocol: 'https:',
  username: '',
  password: '',
  host: 'api.github.com',
  hostname: 'api.github.com',
  port: '',
  pathname: '/662.js',
  search: '?owner=module-federation&repo=microlib-example&filedir=dist&branch=customer4',
  searchParams: URLSearchParams {
    'owner' => 'module-federation',
    'repo' => 'microlib-example',
    'filedir' => 'dist',
    'branch' => 'customer4' },
  hash: ''
}
d7880c64634529e0528ec13799bd0d83a70f4de8
0d05e2a92a9a1eb656ba73e65b888325f68ab1b5
modules [
  Object [Module] {
    Address: [Getter],
    Event: [Getter],
    Payment: [Getter],
    Shipping: [Getter],
    EventBus: [Getter]
  }
]
service import took 1138 ms
>>>>>>>>>chunkId 610
modules [
  Object [Module] {
    validateAddress: [Getter],
    authorizePayment: [Getter],
    completePayment: [Getter],
    refundPayment: [Getter],
    shipOrder: [Getter],
    trackShipment: [Getter],
    verifyDelivery: [Getter],
    listen: [Getter],
    notify: [Getter],
    pickOrder: [Getter]
  }
]
adapter import took 0 ms
{
  services: {
    Address: { validateAddress: [Function: validateAddress] },
    Event: {
      listening: false,
      topics: /(?:)/,
      listen: [Function: listen],
      notify: [Function: notify]
    },
    Payment: {
      authorizePayment: [Function: authorizePayment],
      completePayment: [Function: completePayment],
      refundPayment: [Function: refundPayment]
    },
    Shipping: {
      serviceName: 'shippingService',
      topic: 'shippingChannel',
      shipOrder: [Function: shipOrder],
      trackShipment: [Function: trackShipment],
      verifyDelivery: [Function: verifyDelivery],
      returnShipment: [Function: returnShipment],
      getPayload: [Function: getPayload],
      getProperty: [Function: getProperty]
    },
    EventBus: { notify: [Function: notify], listen: [Function: listen] }
  },
  adapters: {
    validateAddress: [Function: validateAddress],
    authorizePayment: [Function: authorizePayment],
    completePayment: [Function: completePayment],
    refundPayment: [Function: refundPayment],
    shipOrder: [Function: shipOrder],
    trackShipment: [Function: trackShipment],
    verifyDelivery: [Function: verifyDelivery],
    listen: [Function: listen],
    notify: [Function: notify],
    pickOrder: [Function: pickOrder]
  },
  overrides: {
    save: [Function: save],
    remove: [Function: remove],
    find: [Function: find],
    update: [Function: update],
    close: [Function: close],
    StorageService: { Persistence: [Object] }
  }
}
>>>>>>>>>chunkId 610
>>>>>>>>>chunkId 583
github url URL {
  href: 'https://api.github.com/583.js?owner=module-federation&repo=microlib-example&filedir=dist&branch=customer4',
  origin: 'https://api.github.com',
  protocol: 'https:',
  username: '',
  password: '',
  host: 'api.github.com',
  hostname: 'api.github.com',
  port: '',
  pathname: '/583.js',
  search: '?owner=module-federation&repo=microlib-example&filedir=dist&branch=customer4',
  searchParams: URLSearchParams {
    'owner' => 'module-federation',
    'repo' => 'microlib-example',
    'filedir' => 'dist',
    'branch' => 'customer4' },
  hash: ''
}
github url https://api.github.com
dbe8111e01f3c394130164688f0da06e7bb77a69
wasm modules took 527ms
constructObject 26912
constructObject 27584
{
  modelName: 'wasm',
  endpoint: 'wasm',
  factory: [Function: factory],
  onUpdate: [Function: onUpdate],
  onDelete: [Function: onDelete],
  commands: {
    serviceMeshListen: { command: [Function: command], acl: [Array] },
    serviceMeshNotify: { command: [Function: command], acl: [Array] },
    runFibonacci: { command: [Function: command], acl: [Array] },
    serviceMeshCallback: { command: [Function: command], acl: [Array] },
    fibonacci: { command: [Function: command], acl: [Array] },
    commandEx: { command: [Function: command], acl: [Array] }
  },
  ports: {
    notify: {
      service: 'Event',
      type: '0',
      callback: [Function: callback],
      undo: [Function: undo]
    },
    listen: {
      service: 'Event',
      type: '0',
      callback: [Function: callback],
      undo: [Function: undo]
    }
  },
  dispose: [Function: dispose]
}
modules [
  Object [Module] { models: [Getter] },
  {
    modelName: 'wasm',
    endpoint: 'wasm',
    factory: [Function: factory],
    onUpdate: [Function: onUpdate],
    onDelete: [Function: onDelete],
    commands: {
      serviceMeshListen: [Object],
      serviceMeshNotify: [Object],
      runFibonacci: [Object],
      serviceMeshCallback: [Object],
      fibonacci: [Object],
      commandEx: [Object]
    },
    ports: { notify: [Object], listen: [Object] },
    dispose: [Function: dispose]
  }
]
model import took 979 ms
running in webserver mode
{ endpoint: 'customers', fn: [AsyncFunction: getModels] }
{ endpoint: 'products', fn: [AsyncFunction: getModels] }
{ endpoint: 'wasm', fn: [AsyncFunction: getModels] }
{ endpoint: 'customers', fn: [AsyncFunction: postModel] }
{ endpoint: 'products', fn: [AsyncFunction: postModel] }
{ endpoint: 'wasm', fn: [AsyncFunction: postModel] }
{ endpoint: 'customers', fn: [AsyncFunction: getModelById] }
{ endpoint: 'products', fn: [AsyncFunction: getModelById] }
{ endpoint: 'wasm', fn: [AsyncFunction: getModelById] }
{ endpoint: 'customers', fn: [AsyncFunction: patchModel] }
{ endpoint: 'products', fn: [AsyncFunction: patchModel] }
{ endpoint: 'wasm', fn: [AsyncFunction: patchModel] }
{ endpoint: 'customers', fn: [AsyncFunction: deleteModel] }
{ endpoint: 'products', fn: [AsyncFunction: deleteModel] }
{ endpoint: 'wasm', fn: [AsyncFunction: deleteModel] }
{ endpoint: 'customers', fn: [AsyncFunction: patchModel] }
{ endpoint: 'products', fn: [AsyncFunction: patchModel] }
{ endpoint: 'wasm', fn: [AsyncFunction: patchModel] }

total time to import & register remote modules: 2.122s

time to load cache: 9.204ms
local models [ 'customer', 'product', 'wasm' ] remote models [ 'order' ]
listen for unhandled consumer events
 [] 
forward unhandled producer events
 []

 ðŸŒŽ Ã†GIS listening on http://localhost:8070 

can't connect to db - using memory
can't connect to db - using memory
can't connect to db - using memory
dnsResolve Error: queryCname ENODATA localhost
    at QueryReqWrap.onresolve [as oncomplete] (node:internal/dns/promises:171:17) {
  errno: undefined,
  code: 'ENODATA',
  syscall: 'queryCname',
  hostname: 'localhost'
}
host address 127.0.0.1
[Function: addListener] Error: connect ECONNREFUSED 127.0.0.1:80
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1142:16) {
  errno: -61,
  code: 'ECONNREFUSED',
  syscall: 'connect',
  address: '127.0.0.1',
  port: 80
}
{
  function: 'getConfig',
  method: 'GET',
  params: {},
  query: { isCached: 'false' }
}
{
  function: 'postModel',
  method: 'POST',
  params: {},
  query: {},
  firstName: 'Uncle',
  lastName: 'Bob',
  email: 'bob@email.com',
  creditCardNumber: '378282246310005',
  shippingAddress: '123 Park Ave. NY, NY 45678',
  billingAddress: '123 Park Ave. NY, NY 45678',
  orderItems: [
    { itemId: 'item1', price: 329.95 },
    { itemId: 'item2', price: 59, qty: 4 }
  ],
  key1: 'val1',
  key2: 'val2',
  fibonacci: '20'
}
{
  function: 'addModel',
  output: {
    freezeProperties: [Function: freezeProperties],
    requireProperties: [Function: requireProperties],
    validateProperties: [Function: validateProperties],
    encryptProperties: [Function: encryptProperties],
    customerId: '78M3JF8e',
    firstName: 'Uncle',
    lastName: '47f8eef5984a7ec0f35d895776aa69c2',
    creditCardNumber: 'f7b01157063d99a2a41e15c751b62779',
    shippingAddress: '834717fd309c720fb1f0fe68f4f57760844632efeab28b2931e5e69485cbf2d8',
    billingAddress: '834717fd309c720fb1f0fe68f4f57760844632efeab28b2931e5e69485cbf2d8',
    phone: undefined,
    email: '28e50bf84b0b96b845a4f4d9489bb6e6',
    userId: undefined,
    validateModel: [Function: validateModel],
    decrypt: [Function: decrypt],
    orders: [AsyncFunction: orders],
    getEventName: [Function: getEventName],
    undo: [AsyncFunction: undo],
    update: [AsyncFunction: update],
    listSync: [Function: listSync],
    list: [AsyncFunction: list],
    addListener: [Function: addListener],
    emit: [AsyncFunction: emit],
    getArgs: [Function: getArgs],
    getEventMask: [Function: getEventMask],
    getSpec: [Function: getSpec],
    getPorts: [Function: getPorts],
    getName: [Function: getName],
    getId: [Function: getId],
    getPortFlow: [Function: getPortFlow],
    getKey: [Function: getKey],
    toJSON: [Function: toJSON],
    [Symbol(createTime)]: 1634006354307,
    [Symbol(validations)]: [ [Object], [Object], [Object], [Object] ],
    [Symbol(portFlow)]: [],
    [Symbol(modelName)]: 'customer',
    [Symbol(id)]: 'PuWF-XDpSZp_i6lz41ZUP',
    [Symbol(onUpdate)]: [Function: [onUpdate]],
    [Symbol(onDelete)]: [Function: [onDelete]],
    [Symbol(validate)]: [Function: [validate]],
    [Symbol(prevModel)]: {
      customerId: '78M3JF8e',
      firstName: 'Uncle',
      lastName: 'Bob',
      creditCardNumber: '378282246310005',
      shippingAddress: '123 Park Ave. NY, NY 45678',
      billingAddress: '123 Park Ave. NY, NY 45678',
      email: 'bob@email.com',
      id: 'PuWF-XDpSZp_i6lz41ZUP',
      modelName: 'customer',
      createTime: 'Tue, 12 Oct 2021 02:39:14 GMT',
      portFlow: []
    }
  }
}
client initialized {
  id: 'a1caYzoRP9RypNFpFfdOL',
  pid: 'browser',
  address: { address: '::1', family: 'IPv6', port: 8070 }
}
client disconnected { id: 'a1caYzoRP9RypNFpFfdOL', address: {} }
client initialized {
  id: '6BSWMNDjDeE5wOwXKPT-V',
  pid: 'browser',
  address: { address: '::1', family: 'IPv6', port: 8070 }
}
client disconnected { id: '6BSWMNDjDeE5wOwXKPT-V', address: {} }
